name: Build

on: push

env:
  SKIA_VERSION: m115
  SKIA_SHA: 3e827bac0cc99f8cb552079a4bc8c2a79ac2460b

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload-url: ${{ steps.create-release.outputs.upload-url }}
    steps:
      - name: Create Release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data: { upload_url: uploadUrl } } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: '${{ env.SKIA_VERSION }}-${{ env.SKIA_SHA }}',
              name: '${{ env.SKIA_VERSION }}-${{ env.SKIA_SHA }}',
              target_commitish: context.sha
            })
            core.setOutput('upload-url', uploadUrl)

  build:
    name: Build
    needs: [create-release]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-20.04, macos-latest]
        mode: [Release]
        arch: [x64, arm64]
        exclude:
          - os: windows-latest
            arch: arm64
          - os: ubuntu-20.04
            arch: arm64
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout Skia
        uses: actions/checkout@v3
        with:
          repository: google/skia
          ref: ${{ env.SKIA_SHA }}

      - name: Install Dependencies
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            choco install llvm
            choco install zip
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            brew install coreutils python ninja
          else
            sudo apt-get update
            sudo apt-get install -y \
              git g++ g++-multilib clang-11 libc++abi1-11 libc++1-11 libc++-11-dev pandoc dpkg-dev \
              libcurl4-openssl-dev libgif-dev libjpeg-dev libz-dev libpng-dev libtinyxml-dev \
              libpixman-1-dev libx11-dev libxcursor-dev ninja-build zip unzip libfontconfig-dev \
              libgl1-mesa-dev
          fi

      - name: Download depot_tools
        run : |
          git clone --depth=1 'https://chromium.googlesource.com/chromium/tools/depot_tools.git'
          echo "${PWD}/depot_tools" >> $GITHUB_PATH

      - name: Sync Deps
        run: |
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            export python=python3
          else
            export python=python
          fi
          $python tools/git-sync-deps

      - name: Generating Ninja Files
        run: |
          if [[ "${{ matrix.mode }}" == "Debug" ]]; then
            export is_debug=true
            export is_official=false
          else
            export is_debug=false
            export is_official=true
          fi
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            export gn=gn.bat
            export gn_flags='win_vc="C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC" win_toolchain_version="15.0" win_sdk="C:\\Program Files (x86)\\Windows Kits\\10" win_sdk_version="10.0.18362.0" cc="clang" cxx="clang++" clang_win="C:\Program Files\LLVM" clang_win_version="9.0.0"'
            if [[ "${{ matrix.mode }}" == "Debug" ]]; then
              export gn_flags="$gn_flags extra_cflags=[\"-MTd\"]"
            else
              export gn_flags="$gn_flags extra_cflags=[\"-MT\"]"
            fi
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            export gn=gn
            if [[ "${{ matrix.arch }}" == arm64 ]]; then
              export gn_flags='extra_cflags=["-stdlib=libc++", "-mmacosx-version-min=11.0"] extra_cflags_cc=["-frtti"]'
            else
              export gn_flags='extra_cflags=["-stdlib=libc++", "-mmacosx-version-min=10.9"] extra_cflags_cc=["-frtti"]'
            fi
          else
            export gn=gn
            export gn_flags='cc="clang-11" cxx="clang++-11" extra_cflags_cc=["-stdlib=libc++"] extra_ldflags=["-stdlib=libc++"]'
          fi
          $gn gen out/${{ matrix.mode }}-${{ matrix.arch }} --args="is_debug=$is_debug is_official_build=$is_official skia_use_system_expat=false skia_use_system_icu=false skia_use_system_libjpeg_turbo=false skia_use_system_libpng=false skia_use_system_libwebp=false skia_use_system_zlib=false skia_use_sfntly=false skia_use_freetype=true skia_use_harfbuzz=true skia_pdf_subset_harfbuzz=true skia_use_system_freetype2=false skia_use_system_harfbuzz=false target_cpu=\"${{ matrix.arch }}\" $gn_flags"

      - name: Compiling
        run: ninja -C out/${{ matrix.mode }}-${{ matrix.arch }} skia modules

      - name: Copying Files
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            export libext=lib
          else
            export libext=a
          fi
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            export cp=gcp
          else
            export cp=cp
          fi
          export dst=skia-${{ runner.os }}-${{ matrix.mode }}-${{ matrix.arch }}
          mkdir $dst
          $cp -R --parents \
            out/${{ matrix.mode }}-${{ matrix.arch }}/args.gn \
            out/${{ matrix.mode }}-${{ matrix.arch }}/*.$libext \
            include \
            modules/skottie/include/*.h \
            modules/skparagraph/include/*.h \
            modules/skplaintexteditor/include/*.h \
            modules/skresources/include/*.h \
            modules/sksg/include/*.h \
            modules/skshaper/include/*.h \
            modules/skunicode/include/*.h \
            modules/svg/include/*.h \
            src/core/*.h \
            src/gpu/gl/*.h \
            third_party/externals/angle2/LICENSE \
            third_party/externals/angle2/include \
            third_party/externals/freetype/docs/FTL.TXT \
            third_party/externals/freetype/docs/GPLv2.TXT \
            third_party/externals/freetype/LICENSE.TXT \
            third_party/externals/freetype/include \
            third_party/externals/libpng/LICENSE \
            third_party/externals/libpng/*.h \
            third_party/externals/libwebp/COPYING \
            third_party/externals/libwebp/PATENTS \
            third_party/externals/libwebp/src/dec/*.h \
            third_party/externals/libwebp/src/dsp/*.h \
            third_party/externals/libwebp/src/enc/*.h \
            third_party/externals/libwebp/src/mux/*.h \
            third_party/externals/libwebp/src/utils/*.h \
            third_party/externals/libwebp/src/webp/*.h \
            third_party/externals/harfbuzz/COPYING \
            third_party/externals/harfbuzz/src/*.h \
            third_party/externals/swiftshader/LICENSE.txt \
            third_party/externals/swiftshader/include \
            third_party/externals/zlib/LICENSE \
            third_party/externals/zlib/*.h \
            $dst

      - name: Create Package
        run: |
          tar zcvf skia-${{ runner.os }}-${{ matrix.mode }}-${{ matrix.arch }}.tar.gz skia-${{ runner.os }}-${{ matrix.mode }}-${{ matrix.arch }}

      - name: Add To Release
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs')
            const path = require('path')

            const globber = await glob.create('skia-${{ runner.os }}-${{ matrix.mode }}-${{ matrix.arch }}.tar.gz');
            for await (const file of globber.globGenerator()) {
              await github.rest.repos.uploadReleaseAsset({
                url: '${{ needs.create-release.outputs.upload-url }}',
                headers: {
                  'content-type': 'application/gzip'
                },
                name: path.basename(file),
                data: fs.readFileSync(file)
              });
            }
